{"ast":null,"code":"/*\nconst codeTest = (arr, code) => {\n   let ref\n    \n  let res = arr\n   arr = arr.map((el, i) => {if (el === code[i]) {return 'X' } else return el}) ;\n    // send when problem is solved \n  if (arr.join('') === 'XXXX') return 'CODEBREAK!';\n  //\n   //setTurnCount(prevCount => prevCount + 1); build this on the main file instead\n   ref = code.map((el, i) => { if (arr[i] === 'X') { return 'X'} else return el});\n   arr = arr.map((el) => {\n      if (el === 'X') return el;\n      if (ref.includes(el)) {\n         ref[ref.indexOf(el)]  = null  \n        return 'O'\n      };\n      return 'F';\n      });\n   res = res.concat(arr.sort().reverse());\n   return res\n }\n*/\n\nconst generateCode = () => {\n  //actual logic\n  /*\n  const codeRef = ['YLW', 'BLU', 'ORG', 'GRN', 'RED', 'VLT', 'BLK', 'WHT']\n   let res =[]\n   for(let i = 0; i < 4 ; i++) {\n    res.push(codeRef[Math.floor(Math.random() * codeRef.length)])\n  }\n   return res\n  */\n\n  //test\n  return ['WHT', 'WHT', 'WHT', 'WHT'];\n};\nexport default generateCode;","map":{"version":3,"names":["generateCode"],"sources":["D:/js projects/Portfolio/React Portfolio/LandingPageReact/mastermind/src/GameLogic.js"],"sourcesContent":["  /*\n  const codeTest = (arr, code) => {\n\n    let ref\n      \n    let res = arr\n\n    arr = arr.map((el, i) => {if (el === code[i]) {return 'X' } else return el}) ;\n\n\n    // send when problem is solved \n    if (arr.join('') === 'XXXX') return 'CODEBREAK!';\n    //\n\n    //setTurnCount(prevCount => prevCount + 1); build this on the main file instead\n\n    ref = code.map((el, i) => { if (arr[i] === 'X') { return 'X'} else return el});\n\n    arr = arr.map((el) => {\n        if (el === 'X') return el;\n        if (ref.includes(el)) {\n           ref[ref.indexOf(el)]  = null  \n          return 'O'\n        };\n        return 'F';\n        });\n\n    res = res.concat(arr.sort().reverse());\n\n    return res\n\n  }\n  */\n\n  const generateCode= () => {\n    //actual logic\n    /*\n    const codeRef = ['YLW', 'BLU', 'ORG', 'GRN', 'RED', 'VLT', 'BLK', 'WHT']\n\n    let res =[]\n\n    for(let i = 0; i < 4 ; i++) {\n      res.push(codeRef[Math.floor(Math.random() * codeRef.length)])\n    }\n\n    return res\n    */\n\n    //test\n    return ['WHT','WHT','WHT','WHT']\n  }\n\n\nexport default generateCode"],"mappings":"AAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYE,MAAMA,YAAY,GAAEA,CAAA,KAAM;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EAKI;EACA,OAAO,CAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,CAAC;AAClC,CAAC;AAGH,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}